name: Build

on:
  push:
    branches: [ master, staging ]
    tags: '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
        qt-version: ['5.15.2']
        qt-target: ['desktop']
        include:
          - os: windows-latest
            qt-version: '6.2.4'
            qt-target: 'desktop'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Setup environment
      run: |
        sed -i -e '/^#/d' .github/config.env
        sed -i -e '/^$/d' .github/config.env
        cat .github/config.env >> "${GITHUB_ENV}"
      shell: bash
    - name: Get OS name
      run: |
        IFS='-'
        read -a arr <<< ${{ matrix.os }}
        echo "os_name=${arr[0]}" >> "${GITHUB_ENV}"
      shell: bash
    ## Install Qt
    # Windows
    - if: contains(matrix.os, 'windows')
      name: Install Qt (Windows)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'windows'
        arch: 'win64_mingw'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts qtwebsockets'
    - if: contains(matrix.os, 'windows')
      name: Install MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
    # Ubuntu
    - if: contains(matrix.os, 'ubuntu')
      name: Install Qt (Ubuntu)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'linux'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts'
    # MacOS
    - if: contains(matrix.os, 'macos')
      name: Install Qt (macOS)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'mac'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts'
    ## Build
    - name: Build
      run: .ci/${{ env.os_name }}-build.sh
      shell: bash
    - if: contains(matrix.os, 'windows')
      name: Windows build
      run: |
        lrelease ${{ env.app_name }}.pro
        qmake INCLUDEPATH+=C:\OpenSSL\include LIBS+=-LC:\OpenSSL\lib
        mingw32-make -j4
        cd release
        windeployqt ${{ env.executable_name }}.exe
      shell: cmd
    - if: contains(matrix.os, 'windows')
      name: Finalize Windows build
      run: .ci/${{ env.os_name }}-build.sh 1
      shell: bash
    ## Package
    # Windows
    - if: contains(matrix.os, 'windows')
      name: Package (Windows)
      uses: vimtor/action-zip@v1
      with:
        files: ../release/
        dest: ${{ env.app_name }}-win32.zip
    ## Upload
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-${{ env.os_name }}
        path: |
          ${{ env.executable_name }}
          *.zip
          *.AppImage
          *.dmg

  # WebAssembly
  wasm-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        qt-version: ['5.15.2']
        qt-target: ['desktop']
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    # Install Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'linux'
        arch: 'wasm_32'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts'
    # Install emscripten
    - name: Install emscripten
      uses: mymindstorm/setup-emsdk@v11
      with:
        version: 1.39.8
        actions-cache-folder: 'emsdk-cache1'
    # Build
    - run: source .ci/common/build.sh wasm
      shell: bash
    - uses: actions/upload-artifact@v2
      with:
        name: build-wasm
        path: |
          *.html
          *.js
          *.wasm
          *.svg

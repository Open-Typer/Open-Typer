name: Build

on:
  push:
    branches: [ master ]
    tags: '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-latest, macos-latest]
        qt-version: ['5.15.2']
        qt-target: ['desktop']
        include:
          - os: windows-latest
            qt-version: '5.15.2'
            qt-target: 'desktop'
            mingw-version: 81
        exclude:
          - os: windows-latest
            qt-version: '5.15.2'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: 'Get Previous tag'
      id: previoustag
      uses: WyriHaximus/github-action-get-previous-tag@v1
    ## Install Qt
    # Windows
    - if: contains(matrix.os, 'windows')
      name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        host: 'windows'
        arch: 'win32_mingw${{ matrix.mingw-version }}'
        target: ${{ matrix.qt-target }}
        dir: '${{ github.workspace }}'
        modules: 'qtcharts'
        setup-python: 'false'
    - if: contains(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v')
      name: Install Qt IFW
      run: |
        curl -o aqt.exe -L https://github.com/miurahr/aqtinstall/releases/download/Continuous/aqt.exe
        ./aqt.exe install-tool windows desktop tools_ifw
        mv Tools ..
        export PATH=$PATH:$(echo ${pwd}/../Tools/QtInstallerFramework/*/bin)
      shell: bash
    - if: contains(matrix.os, 'windows')
      name: Install 32-bit MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: i686
    # Ubuntu
    - if: contains(matrix.os, 'ubuntu')
      name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        host: 'linux'
        target: ${{ matrix.qt-target }}
        dir: '${{ github.workspace }}'
        modules: 'qtcharts'
        setup-python: 'false'
    # MacOS
    - if: contains(matrix.os, 'macos')
      name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        host: 'mac'
        target: ${{ matrix.qt-target }}
        dir: '${{ github.workspace }}'
        modules: 'qtcharts'
        setup-python: 'false'
    ## Build
    # Windows
    - if: contains(matrix.os, 'windows')
      run: |
        cp .ci/windows-repo.sh ..
        source .ci/windows-build.sh
      shell: bash
    # Ubuntu
    - if: contains(matrix.os, 'ubuntu') && startsWith(github.ref, 'refs/tags/v')
      name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v5
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
    - if: contains(matrix.os, 'ubuntu') && startsWith(github.ref, 'refs/tags/v')
      run: source .ci/ubuntu-ppa.sh
      shell: bash
    - if: contains(matrix.os, 'ubuntu')
      run: source .ci/ubuntu-build.sh
      shell: bash
    # MacOS
    - if: contains(matrix.os, 'macos')
      run: source .ci/macos-build.sh
      shell: bash
    ## Package
    # Windows
    - if: contains(matrix.os, 'windows')
      uses: vimtor/action-zip@v1
      with:
        files: ../release/
        dest: ../Open-Typer-win32.zip
    - if: contains(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v')
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository_owner }}/installer
        fetch-depth: 0
        token: ${{ secrets.PUSH_TOKEN }}
    - if: contains(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v')
      name: Build installer and repository for Windows
      run: source ../windows-repo.sh ${{ steps.previoustag.outputs.tag }}
      shell: bash
    - if: contains(matrix.os, 'windows')
      run: mv ../*.zip .
      shell: bash
    ## Upload
    # Windows
    - if: contains(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: build-windows
        path: |
          *.zip
          *.exe
    # Ubuntu
    - if: contains(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v2
      with:
        name: build-ubuntu
        path: |
          'open-typer'
          *.AppImage
    # MacOS
    - if: contains(matrix.os, 'macos')
      uses: actions/upload-artifact@v2
      with:
        name: build-macos
        path: '*.dmg'

  # WebAssembly
  wasm-build:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu]
        qt-version: ['5.15.2']
        qt-target: ['desktop']
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    ## Install Qt
    # Ubuntu
    - if: contains(matrix.os, 'ubuntu')
      name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        host: 'linux'
        arch: 'wasm_32'
        target: ${{ matrix.qt-target }}
        dir: '${{ github.workspace }}'
        modules: 'qtcharts'
        setup-python: 'false'
    # Install emscripten
    - uses: mymindstorm/setup-emsdk@v11
      with:
        version: 1.39.8
        actions-cache-folder: 'emsdk-cache1'
    # Build
    - run: source .ci/common/build.sh wasm
      shell: bash
    - uses: actions/upload-artifact@v2
      with:
        name: build-wasm
        path: |
          *.html
          *.js
          *.wasm
          *.svg
    ## Deploy
    - run: |
        mkdir -p ../online-app-deploy
        cp *.html ../online-app-deploy/
        cp *.js ../online-app-deploy/
        cp *.wasm ../online-app-deploy/
        cp *.svg ../online-app-deploy/
    - uses: actions/checkout@v2
      with:
        ref: 'gh-pages'
    - run: |
        mv ../online-app-deploy/* ./
        git add -A
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git commit -m "online app deploy"
    - name: Push online-app
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages

  # Release
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, wasm-build]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Download Ubuntu packages from Launchpad
      run: |
        ./.ci/ubuntu-ppa-wait.sh
        ./.ci/ubuntu-ppa-download.sh
        ls
      shell: bash
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build-windows/*.exe,build-ubuntu/*.AppImage,*.deb"
        name: "Open-Typer ${{ github.event.ref }}"
        owner: ${{ github.event.pusher.name }}
        draft: true
        token: ${{ secrets.GITHUB_TOKEN }}

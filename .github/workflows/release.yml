name: Release

on:
  push:
    tags: '*'

jobs:
  build-linux-release:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        qt-version: ['6.5.1']
        qt-target: ['desktop']
        arch: ['amd64', 'aarch64', 'armv7']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Setup environment
      run: |
        sed -i -e '/^#/d' .github/config.env
        sed -i -e '/^$/d' .github/config.env
        cat .github/config.env >> "${GITHUB_ENV}"
      shell: bash
    - name: Set up node.js
      uses: actions/setup-node@v3
    - if: env.build_on_new_tags != 1
      name: Cancel if build on new tags is disabled
      uses: andymckay/cancel-action@0.2
    - if: contains(matrix.arch, 'amd64')
      name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbcommon-x11-0
      shell: bash
    - name: Get version
      run: |
        version=$(head -n 1 .qmake.conf)
        version=${version:8}
        echo previous_tag=$version >> "${GITHUB_ENV}"
      shell: bash
    - if: contains(github.ref, '-')
      name: Check if this is a pre-release
      run: echo is_prerelease=1 >> "${GITHUB_ENV}"
      shell: bash
    # Install Qt
    - if: contains(matrix.arch, 'amd64')
      name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'linux'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts'
    - if: "!contains(matrix.arch, 'amd64')"
      name: Restore cross-compiled Qt from cache
      id: cache-qt-cross
      uses: actions/cache@v3
      with:
        path: |
          ./qt-host/
          ./qt-cross/
          ./sysroot/
        key: qt-cross-${{ runner.os }}-${{ matrix.qt-version }}-${{ matrix.qt-target }}-${{ matrix.qt-modules }}-${{ matrix.arch }}
        restore-keys:
          qt-cross-${{ runner.os }}-${{ matrix.qt-version }}-${{ matrix.qt-target }}-${{ matrix.qt-modules }}-${{ matrix.arch }}
    - if: "!contains(matrix.arch, 'amd64') && steps.cache-qt-cross.outputs.cache-hit != 'true'"
      name: Cross-compile Qt
      shell: bash
      run: .ci/build-qt6.sh "${{ matrix.qt-version }}" "${{ matrix.qt-modules }}" "${{ matrix.arch }}"
    # Build
    - if: "!contains(matrix.arch, 'amd64')"
      name: Prepare cross-compilation environment
      run: .ci/prepare-cross-build.sh "${{ matrix.arch }}"
      shell: bash
    - name: Build
      run: .ci/ubuntu-build.sh
      shell: bash
    # Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-ubuntu
        path: |
          *.AppImage
          *.zsync
    - if: env.is_prerelease == 1
      name: Do not upload packages to the PPA if this is a pre-release
      run: echo upload_to_ppa=0 >> "${GITHUB_ENV}"
      shell: bash
    - if: env.upload_to_ppa == 1
      name: Import GPG key
      id: gpgkey
      uses: crazy-max/ghaction-import-gpg@v5
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
    - if: env.upload_to_ppa == 1
      name: Save GPG info
      run: |
        echo gpg_name=${{ steps.gpgkey.outputs.name }} >> "${GITHUB_ENV}"
        echo gpg_email=${{ steps.gpgkey.outputs.email }} >> "${GITHUB_ENV}"
      shell: bash
    - if: env.upload_to_ppa == 1
      name: Upload source packages to PPA
      run: .ci/ubuntu-ppa.sh
      shell: bash

  build-windows-release:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt-version: '6.5.1'
            qt-target: 'desktop'
            mingw-version: '11.2.0'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Setup environment
      run: |
        sed -i -e '/^#/d' .github/config.env
        sed -i -e '/^$/d' .github/config.env
        cat .github/config.env >> "${GITHUB_ENV}"
      shell: bash
    - name: Set up node.js
      uses: actions/setup-node@v3
    - if: env.build_on_new_tags != 1
      name: Cancel if build on new tags is disabled
      uses: andymckay/cancel-action@0.2
    - name: Get version
      run: |
        version=$(head -n 1 .qmake.conf)
        version=${version:8}
        echo previous_tag=$version >> "${GITHUB_ENV}"
      shell: bash
    - if: contains(github.ref, '-')
      name: Check if this is a pre-release
      run: echo is_prerelease=1 >> "${GITHUB_ENV}"
      shell: bash
    # Install Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'windows'
        arch: 'win64_mingw'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts'
    - name: Install Qt IFW
      run: |
        curl -o aqt.exe -L https://github.com/miurahr/aqtinstall/releases/download/v2.2.1/aqt.exe
        ./aqt.exe install-tool windows desktop tools_ifw
        mv Tools ..
        echo ${pwd}/../Tools/QtInstallerFramework/*/bin >> "${GITHUB_PATH}"
      shell: bash
    - name: Install MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
        version: ${{ matrix.mingw-version }}
    # Build
    - name: Build
      run: |
        cp .ci/windows-repo.sh ..
        .ci/windows-build.sh
      shell: bash
    - name: Windows build
      run: |
        qmake INCLUDEPATH+=C:\OpenSSL\include LIBS+=-LC:\OpenSSL\lib || exit 3
        mingw32-make -j4 || exit 4
        mkdir release
        move ${{ env.executable_name }}.exe release/
        move *.dll release/
        cd release
        windeployqt ${{ env.executable_name }}.exe --qmldir ..\src || exit 5
        for %%v in (opentyper-*.dll) do windeployqt "%%v" || exit 5
      shell: cmd
    - name: Finalize Windows build
      run: |
        .ci/windows-build.sh 1
        mv release ../
      shell: bash
    # Update Windows repository
    - if: env.create_windows_installer == 1
      name: Get installer configuration
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository_owner }}/${{ env.windows_installer_repo }}
        fetch-depth: 0
        token: ${{ secrets.PUSH_TOKEN }}
    - if: env.create_windows_installer == 1 && env.is_prerelease == 1
      name: Do not update Windows repo if this is a pre-release
      run: |
        echo update_windows_installer=0 >> "${GITHUB_ENV}"
        echo update_windows_repository=0 >> "${GITHUB_ENV}"
      shell: bash
    - if: env.create_windows_installer == 1
      name: Build installer and repository for Windows
      run: ../windows-repo.sh
      shell: bash
    # Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-windows
        path: '*.exe'

  build-macos-release:
    runs-on: macos-latest
    strategy:
      matrix:
        qt-version: ['6.5.1']
        qt-target: ['desktop']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Setup environment
      run: |
        sed -i -e '/^#/d' .github/config.env
        sed -i -e '/^$/d' .github/config.env
        cat .github/config.env >> "${GITHUB_ENV}"
      shell: bash
    - name: Set up node.js
      uses: actions/setup-node@v3
    - if: env.build_on_new_tags != 1
      name: Cancel if build on new tags is disabled
      uses: andymckay/cancel-action@0.2
    - name: Get version
      run: |
        version=$(head -n 1 .qmake.conf)
        version=${version:8}
        echo previous_tag=$version >> "${GITHUB_ENV}"
      shell: bash
    - if: contains(github.ref, '-')
      name: Check if this is a pre-release
      run: echo is_prerelease=1 >> "${GITHUB_ENV}"
      shell: bash
    # Install Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'mac'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts qt5compat qtshadertools'
    # Build
    - if: contains(matrix.os, 'macos')
      name: Build (macOS)
      run: .ci/macos-build.sh
      shell: bash
    ## Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-macos
        path: '*.dmg'

  # WebAssembly
  build-wasm-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        qt-version: ['6.5.1']
        qt-target: ['desktop']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    # Install emscripten
    - name: Install emscripten
      uses: mymindstorm/setup-emsdk@v11
      with:
        version: 3.1.25
        actions-cache-folder: 'emsdk-cache'
    # Install Qt
    - name: Install desktop Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        aqtversion: '==3.1.6'
        py7zrversion: '==0.20.2'
        host: 'linux'
        arch: 'gcc_64'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts qt5compat qtshadertools'
    - name: Install WASM Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        aqtversion: '==3.1.6'
        py7zrversion: '==0.20.2'
        host: 'linux'
        arch: 'wasm_multithread'
        target: ${{ matrix.qt-target }}
        modules: 'qtcharts qt5compat qtshadertools'
    # Build
    - run: source .ci/common/build.sh wasm
      shell: bash
    - uses: actions/upload-artifact@v3
      with:
        name: build-wasm
        path: |
          *.html
          *.js
          *.wasm
          *.svg

  # Release
  release:
    runs-on: ubuntu-latest
    needs: [build-linux-release, build-windows-release, build-macos-release, build-wasm-release]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Setup environment
      run: |
        sed -i -e '/^#/d' .github/config.env
        sed -i -e '/^$/d' .github/config.env
        cat .github/config.env >> "${GITHUB_ENV}"
        GITHUB_REF_NAME="${{ github.ref_name }}"
        echo "version=${GITHUB_REF_NAME//v/}" >> $GITHUB_ENV
      shell: bash
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository_owner }}/${{ env.online_app_repo }}
        fetch-depth: 0
        token: ${{ secrets.PUSH_TOKEN }}
        path: online-app
    - if: contains(github.ref, '-')
      name: Check if this is a pre-release
      run: echo is_prerelease=1 >> "${GITHUB_ENV}"
      shell: bash
    - if: env.is_prerelease == 1
      name: Do not upload packages to the PPA if this is a pre-release
      run: |
        echo upload_to_ppa=0 >> "${GITHUB_ENV}"
        echo upload_online_app=0 >> "${GITHUB_ENV}"
      shell: bash
    - if: env.upload_to_ppa == 1
      name: Download Ubuntu packages from Launchpad
      run: |
        ./.ci/ubuntu-ppa-wait.sh
        ./.ci/ubuntu-ppa-download.sh
        ls
      shell: bash
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - if: env.upload_online_app == 1
      name: Upload online app
      run: |
        cd online-app
        git checkout --orphan new-branch
        mv ../build-wasm/* ./
        rm -f index.html
        ln -s ${{ env.executable_name }}.html index.html
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git add -A
        git commit -m "Add new release files"
        git branch -D master
        git branch -m master
        git push -f origin master
      shell: bash
    - if: env.create_release == 1
      name: Create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build-windows/*.exe,build-ubuntu/*.AppImage,build-ubuntu/*.zsync,*.deb,build-macos/*.dmg"
        name: "${{ env.app_name }} ${{ env.version }}"
        owner: ${{ github.event.pusher.name }}
        draft: true
        token: ${{ secrets.GITHUB_TOKEN }}
